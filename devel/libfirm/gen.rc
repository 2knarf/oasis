cflags\
	-I '$outdir' \
	-I '$outdir'/include\
	-I '$srcdir'/include/libfirm/adt\
	-I '$srcdir'/include/libfirm\
	-I '$srcdir'/ir/adt\
	-I '$srcdir'/ir/ana\
	-I '$srcdir'/ir/be/ia32\
	-I '$srcdir'/ir/be\
	-I '$srcdir'/ir/common\
	-I '$srcdir'/ir/ident\
	-I '$srcdir'/ir/ir\
	-I '$srcdir'/ir/kaps\
	-I '$srcdir'/ir/libcore\
	-I '$srcdir'/ir/lower\
	-I '$srcdir'/ir/lpp\
	-I '$srcdir'/ir/opt\
	-I '$srcdir'/ir/stat\
	-I '$srcdir'/ir/tr\
	-I '$srcdir'/ir/tv

backends=(amd64 arm ia32 sparc TEMPLATE)

rule irspec '$python $srcdir/scripts/gen_ir.py $srcdir/scripts/ir_spec.py $in >$out.tmp && mv $out.tmp $out'
rule new_nodes '$perl $srcdir/ir/be/scripts/generate_new_opcodes.pl $in $outdir'
rule regalloc_if '$perl $srcdir/ir/be/scripts/generate_regalloc_if.pl $in $outdir'
rule emitter '$perl $srcdir/ir/be/scripts/generate_emitter.pl $in $outdir'

genhdrs=(gen_irnode.h gen_proj_names.h)
gensrcs=(gen_irnode.c gen_irio.c)
for(gensrc in $genhdrs $gensrcs) {
	build '$outdir'/$gensrc irspec '$srcdir'/scripts/templates/$gensrc
}

build '$outdir'/include/nodes.h irspec '$srcdir'/scripts/templates/nodes.h
phony headers include/nodes.h

srcs=(ir/*/*.c '$outdir'/$gensrcs)
objs=$srcs.o
for(src in $srcs) cc $src '||' 'phony/$dir/internal_headers'

for(backend in $backends) {
	types=(emitter regalloc_if new_nodes)
	srcs=(ir/be/$backend/*.c '$outdir'/gen_$backend^_$types.c)
	objs=($objs $srcs.o)
	genhdrs=($genhdrs gen_$backend^_$types.h)
	{
		cflags -I '$srcdir'/ir/be/$backend
		for(type in $types) {
			outs=('$outdir'/gen_$backend^_$type.^(c h))\
				build $"outs $type '$srcdir'/ir/be/$backend/$backend^_spec.pl
		}
		for(src in $srcs) cc $src '||' 'phony/$dir/internal_headers'
	} >../$backend.ninja
	subninja '$dir'/$backend.ninja
}
phony internal_headers $genhdrs 'phony/$dir/headers'

ar libfirm.a $objs
