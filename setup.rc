#!/bin/rc

flag e +

fn usage {
	{
		echo 'usage: '$0' [-b builddir]'
		echo '       '$0' [-n]'
	} >[1=2]
	exit 2
}

builddir=out
norecurse=()

while(~ $1 -*) switch($1) {
case -b
	builddir=$2
	shift 2
case -n
	norecurse=1
	shift
case *
	usage $0
}

. ./ninja.rc

fn subgen {
	dir=$pre$1 {
		subninja $dir/local.ninja
		gen_inputs=( $gen_inputs $dir/local.ninja )
		tree_inputs=( $tree_inputs '$builddir'/$dir/root.tree )
		tree_perms=( $tree_perms '$builddir'/$dir/root.perms )
	}
	if(~ $recurse 1) @ gen $1 &
	status=()
}

fn gen {
	if(~ $dir '' .) dir=$1
	if not dir=$dir/$1

	if(~ $dir .) { suf='' pre='' }
	if not { suf=/$dir pre=$dir/ }

	cd $1

	tree_perms=()
	perms_inputs=()
	tree_inputs=()
	gen_inputs=()

	{
		set srcdir $dir
		set outdir '$builddir'$suf

		ifs=() { old_pwd=`{pwd | head -c -1} }
		. ./gen.rc

		build '$srcdir'/local.ninja gen '|' setup.rc ninja.rc '$srcdir'/gen.rc $gen_inputs

		if(! ~ $#tree_perms 0) {
			printf '%s\n' $tree_perms >$old_pwd/local.perms
			perms_inputs=( $perms_inputs '$srcdir'/local.perms )
		}
		if(~ $#perms_inputs 0) build '$outdir/root.perms' stamp
		if not build '$outdir/root.perms' cat $perms_inputs
		if(~ $#tree_inputs 0) build '$outdir/root.tree' stamp
		if not build '$outdir/root.tree' cat $tree_inputs
	} >local.ninja

	wait
}

if(! ~ $#* 0) { gen $1 ; exit }

if(~ $#norecurse 0) {
	recurse=1
	@ gen .
}

{
	set builddir $builddir

	include config.ninja
	include rules.ninja

	subninja local.ninja

	build build.ninja gen '|' setup.rc ninja.rc local.ninja
} >build.ninja.tmp

mv build.ninja.tmp build.ninja
