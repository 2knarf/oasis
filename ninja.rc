# ninja constructs

fn set {
	var=$1 {
		shift
		printf '%s = %s\n' $var $"*
	}
}

fn let {
	vars=() {
		while(! ~ $1 --) {
			vars=($vars $1' = '$2)
			shift 2
		}
		shift
		$*
		printf '  %s\n' $vars
	}
}

fn subninja {
	echo subninja $*
}

fn include {
	echo include $*
}

fn rule {
	name=$1 {
		shift
		let command $"* -- echo rule $name
	}
}

fn build {
	out=$1 rule=$2 {
		shift 2
		echo build $out: $rule $*
	}
}

# higher-level rules

fn stamp {
	build '$outdir/stamp' stamp '$outdir'/$*
}

fn cflags {
	set cflags '$cflags' $*
}

fn cc {
	src=$1 obj=$src.o {
		shift
		if(! ~ $src '$'*) {
			src='$srcdir'/$src
			obj='$outdir'/$obj
		}
		build $obj cc $src $*
	}
}

fn link {
	out='$outdir'/$1 objs=() {
		shift
		for(obj in $*) {
			if(! ~ $obj '$'*) obj='$outdir'/$obj
			objs=($objs $obj)
		}
		build $out link $objs
	}
}

fn ar {
	out='$outdir'/$1 objs=() {
		shift
		for(obj in $*) {
			if(! ~ $obj '$'*) obj='$outdir'/$obj
			objs=($objs $obj)
		}
		build $out ar $objs
	}
}

fn static_lib {
	out=$1 objs=() {
		shift
		for(src) {
			if(~ $src *.c) {
				cc $src
				obj=$src.o
			}
			if not obj=$src
			objs=($objs $obj)
		}
		ar $out $objs
	}
}

fn exe {
	out=$1 objs=() {
		shift
		for(src) {
			if(~ $src *.c) {
				cc $src
				obj=$src.o
			}
			if not obj=$src
			objs=($objs $obj)
		}
		link $out $objs
	}
}

fn yacc {
	outs='$outdir'/$1.tab.^(c h) {
		let yaccflags '-d -b '$1 -- build $"outs yacc $2
	}
}

# packaging rules

fn file {
	out='$builddir/$repo.hash'/$1
	let args 100$3' '$1 --\
		build $out githash $2 '|' '$builddir/$repo.stamp' scripts/hash.rc
	tree_inputs=($tree_inputs $out)

	if(! ~ $3 755 644) tree_perms=($tree_perms 100$3' '$1)
	status=()
}

fn dir {
	tree_perms=($tree_perms '010'$2' '$1)
	status=()
}

fn sym {
	out='$builddir/$repo.hash'/$1
	let args 120000' '$1' '$2 --\
		build $out githash '|' '$builddir/$repo.stamp' scripts/hash.rc
	tree_inputs=($tree_inputs $out)
}

status=()
