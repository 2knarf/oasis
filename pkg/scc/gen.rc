archs=(qbe amd64-sysv)
std=c99
cflags\
	'-std=c99' \
	-D 'SYS=''"linux"''' \
	-D 'PREFIX=' \
	-D NDEBUG\
	-I '$dir'/inc\
	-I '$srcdir'/inc/$std\
	-I '$outdir'/inc

lib libcc.a lib/^(debug.c die.c newitem.c xcalloc.c xmalloc.c xrealloc.c xstrdup.c)

build '$outdir'/inc/error.h awk '$srcdir'/cc2/cc2.h '|' '$srcdir'/cc2/generror.awk ; with\
	expr '-f $srcdir/cc2/generror.awk'

set baseoutdir '$outdir'
hdrs=(\
	assert.h stddef.h errno.h locale.h string.h stdarg.h stdbool.h stdlib.h\
	signal.h stdio.h ctype.h stdint.h\
)
for(arch in $archs) {
	{
		set outdir '$outdir'/$arch
		cflags -D 'ARCH=''"'^$arch^'"'''

		exe cc1-$arch cc1/^(\
			types.c decl.c lex.c error.c symbol.c main.c expr.c\
			code.c stmt.c cpp.c fold.c init.c builtin.c\
			arch/$arch/arch.c\
		) '$baseoutdir'/libcc.a
		file libexec/scc/cc1-$arch '$outdir'/cc1-$arch 755

		exe cc2-$arch -d '$baseoutdir'/inc/error.h cc2/^(\
			main.c parser.c peep.c symbol.c node.c code.c optm.c\
			arch/$arch/^(code.c cgen.c types.c optm.c)\
		) '$baseoutdir'/libcc.a
		file libexec/scc/cc2-$arch '$outdir'/cc2-$arch 755
	} >$arch.ninja ; subninja $arch.ninja

	hdrs=($hdrs bits/$arch/arch/^(stddef.h string.h stdlib.h signal.h stdio.h stdint.h))
}

cflags -D 'ARCH=''"'^$archs(1)^'"'''
exe scc driver/posix/scc.c libcc.a
file bin/scc '$outdir'/scc 755

for(hdr in $hdrs)
	file include/scc/$hdr '$srcdir'/libc/include/$hdr 644

fetch git
