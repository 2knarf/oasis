From 21b9f7852ec9daf1a356c3b588b8053bed5b8383 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Sat, 6 Jul 2019 01:54:05 -0700
Subject: [PATCH] Avoid empty initializer lists

---
 bpf.c                   | 4 ++--
 net.c                   | 2 +-
 sched.c                 | 2 +-
 signal.c                | 2 +-
 strace.c                | 2 +-
 tests/btrfs.c           | 8 ++++----
 tests/clock_nanosleep.c | 2 +-
 tests/nanosleep.c       | 2 +-
 tests/restart_syscall.c | 2 +-
 tests/setrlimit.c       | 2 +-
 tests/timer_create.c    | 2 +-
 tests/wait4.c           | 2 +-
 tests/waitid.c          | 2 +-
 13 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/bpf.c b/bpf.c
index 469f809a..cad5ab05 100644
--- a/bpf.c
+++ b/bpf.c
@@ -43,7 +43,7 @@ bpf_cmd_decoder(struct tcb *const tcp,					\
 #define BEGIN_BPF_CMD_DECODER(bpf_cmd)					\
 	static DECL_BPF_CMD_DECODER(decode_ ## bpf_cmd)			\
 	{								\
-		struct bpf_cmd ## _struct attr = {};			\
+		struct bpf_cmd ## _struct attr = {0};			\
 		const size_t attr_size = bpf_cmd ## _struct_size;	\
 		const unsigned int len = MIN(size, attr_size);		\
 		memcpy(&attr, data, len);				\
@@ -150,7 +150,7 @@ print_ebpf_prog(struct tcb *const tcp, const uint64_t addr, const uint32_t len)
 	if (abbrev(tcp)) {
 		printaddr(addr);
 	} else {
-		struct ebpf_insns_data eid = {};
+		struct ebpf_insns_data eid = {0};
 		struct ebpf_insn insn;
 
 		print_array(tcp, addr, len, &insn, sizeof(insn),
diff --git a/net.c b/net.c
index a58fa921..d5f2dc1d 100644
--- a/net.c
+++ b/net.c
@@ -729,7 +729,7 @@ print_tpacket_stats(struct tcb *const tcp, const kernel_ulong_t addr,
 static void
 print_icmp_filter(struct tcb *const tcp, const kernel_ulong_t addr, int len)
 {
-	struct icmp_filter filter = {};
+	struct icmp_filter filter = {0};
 
 	if (len > (int) sizeof(filter))
 		len = sizeof(filter);
diff --git a/sched.c b/sched.c
index 788ef39b..2e5775d5 100644
--- a/sched.c
+++ b/sched.c
@@ -94,7 +94,7 @@ static void
 print_sched_attr(struct tcb *const tcp, const kernel_ulong_t addr,
 		 unsigned int usize)
 {
-	struct sched_attr attr = {};
+	struct sched_attr attr = {0};
 	unsigned int size;
 	bool is_set = false;
 
diff --git a/signal.c b/signal.c
index 3cb54bb3..bc03dae8 100644
--- a/signal.c
+++ b/signal.c
@@ -246,7 +246,7 @@ print_sigset_addr_len_limit(struct tcb *const tcp, const kernel_ulong_t addr,
 		printaddr(addr);
 		return;
 	}
-	int mask[NSIG_BYTES / sizeof(int)] = {};
+	int mask[NSIG_BYTES / sizeof(int)] = {0};
 	if (umoven_or_printaddr(tcp, addr, len, mask))
 		return;
 	tprints(sprintsigmask_n("", mask, len));
diff --git a/strace.c b/strace.c
index 311e4d62..2a4e6001 100644
--- a/strace.c
+++ b/strace.c
@@ -3359,7 +3359,7 @@ trace_syscall(struct tcb *tcp, unsigned int *sig)
 		syscall_entering_finish(tcp, res);
 		return res;
 	} else {
-		struct timespec ts = {};
+		struct timespec ts = {0};
 		int res = syscall_exiting_decode(tcp, &ts);
 		if (res != 0) {
 			res = syscall_exiting_trace(tcp, &ts, res);
diff --git a/tests/btrfs.c b/tests/btrfs.c
index 2423f65e..3b5ade66 100644
--- a/tests/btrfs.c
+++ b/tests/btrfs.c
@@ -382,7 +382,7 @@ btrfs_test_subvol_ioctls(void)
 	char *long_subvol_name;
 	void *bad_pointer = (void *) (unsigned long) 0xdeadbeeffffffeedULL;
 	uint64_t u64val = 0xdeadbeefbadc0dedULL;
-	struct btrfs_ioctl_vol_args vol_args = {};
+	struct btrfs_ioctl_vol_args vol_args = {0};
 	struct btrfs_ioctl_vol_args_v2 vol_args_v2 = {
 		.fd = 2,
 		.flags = max_flags_plus_one(2),
@@ -629,7 +629,7 @@ btrfs_test_balance_ioctls(void)
 			.devid = 1,
 		},
 	};
-	struct btrfs_ioctl_vol_args vol_args = {};
+	struct btrfs_ioctl_vol_args vol_args = {0};
 
 	ioctl(-1, BTRFS_IOC_BALANCE_CTL, 1);
 	printf("ioctl(-1, %s, %sBTRFS_BALANCE_CTL_PAUSE%s) = -1 EBADF (%m)\n",
@@ -841,7 +841,7 @@ btrfs_print_defrag_range_args(struct btrfs_ioctl_defrag_range_args *args,
 static void
 btrfs_test_defrag_ioctls(void)
 {
-	struct btrfs_ioctl_vol_args vol_args = {};
+	struct btrfs_ioctl_vol_args vol_args = {0};
 	struct btrfs_ioctl_defrag_range_args args = {
 		.start = 0,
 		.len = -1ULL,
@@ -1170,7 +1170,7 @@ btrfs_test_ino_lookup_ioctl(void)
 static void
 btrfs_test_space_info_ioctl(void)
 {
-	struct btrfs_ioctl_space_args args = {};
+	struct btrfs_ioctl_space_args args = {0};
 
 	ioctl(-1, BTRFS_IOC_SPACE_INFO, NULL);
 	printf("ioctl(-1, %s, NULL) = -1 EBADF (%m)\n",
diff --git a/tests/clock_nanosleep.c b/tests/clock_nanosleep.c
index 854fdb3f..0de48963 100644
--- a/tests/clock_nanosleep.c
+++ b/tests/clock_nanosleep.c
@@ -39,7 +39,7 @@ main(void)
 		.ts = { .tv_sec = 0xc0de2, .tv_nsec = 0xc0de3 },
 		.pad = { 0xdeadbeef, 0xbadc0ded }
 	};
-	const sigset_t set = {};
+	const sigset_t set = {0};
 	const struct sigaction act = { .sa_handler = handler };
 	const struct itimerval itv = {
 		.it_interval.tv_usec = 222222,
diff --git a/tests/nanosleep.c b/tests/nanosleep.c
index d55b395c..e41b6b1f 100644
--- a/tests/nanosleep.c
+++ b/tests/nanosleep.c
@@ -53,7 +53,7 @@ main(void)
 		.ts = { .tv_sec = 0xc0de2, .tv_nsec = 0xc0de3 },
 		.pad = { 0xdeadbeef, 0xbadc0ded }
 	};
-	const sigset_t set = {};
+	const sigset_t set = {0};
 	const struct sigaction act = { .sa_handler = handler };
 	const struct itimerval itv = { .it_value.tv_usec = 111111 };
 
diff --git a/tests/restart_syscall.c b/tests/restart_syscall.c
index a42d3b9b..3e48b1c1 100644
--- a/tests/restart_syscall.c
+++ b/tests/restart_syscall.c
@@ -26,7 +26,7 @@ main(void)
 	 */
 	error_msg_and_skip("x32 is broken");
 #else
-	const sigset_t set = {};
+	const sigset_t set = {0};
 	const struct sigaction act = { .sa_handler = SIG_IGN };
 	const struct itimerval itv = { .it_value.tv_usec = 111111 };
 	const struct timespec req = { .tv_nsec = 222222222 };
diff --git a/tests/setrlimit.c b/tests/setrlimit.c
index 886cf65a..89ed1077 100644
--- a/tests/setrlimit.c
+++ b/tests/setrlimit.c
@@ -39,7 +39,7 @@ main(void)
 		printf("setrlimit(%s, NULL) = %s\n", xlat->str, sprintrc(rc));
 # endif
 
-		struct rlimit libc_rlim = {};
+		struct rlimit libc_rlim = {0};
 		if (getrlimit((int) res, &libc_rlim))
 			continue;
 		rlimit[0] = libc_rlim.rlim_cur;
diff --git a/tests/timer_create.c b/tests/timer_create.c
index 2c4dae19..59bc2dd0 100644
--- a/tests/timer_create.c
+++ b/tests/timer_create.c
@@ -26,7 +26,7 @@ main(void)
 	printf("timer_create(CLOCK_REALTIME, NULL, NULL) = -1 %s (%m)\n",
 	       errno2name());
 
-	int tid[4] = {};
+	int tid[4] = {0};
 	struct_sigevent sev = {
 		.sigev_notify = 0xdefaced,
 		.sigev_signo = 0xfacefeed,
diff --git a/tests/wait4.c b/tests/wait4.c
index ea40577a..d25bd87a 100644
--- a/tests/wait4.c
+++ b/tests/wait4.c
@@ -72,7 +72,7 @@ sprint_rusage(const struct rusage *const ru)
 static pid_t
 do_wait4(pid_t pid, int *wstatus, int options, struct rusage *ru)
 {
-	sigset_t mask = {};
+	sigset_t mask = {0};
 	sigaddset(&mask, SIGCHLD);
 
 	assert(sigprocmask(SIG_BLOCK, &mask, NULL) == 0);
diff --git a/tests/waitid.c b/tests/waitid.c
index c58df5e2..730c58d7 100644
--- a/tests/waitid.c
+++ b/tests/waitid.c
@@ -130,7 +130,7 @@ do_waitid(const unsigned int idtype,
 	  const unsigned int options,
 	  const kernel_rusage_t *const rusage)
 {
-	sigset_t mask = {};
+	sigset_t mask = {0};
 	sigaddset(&mask, SIGCHLD);
 
 	assert(sigprocmask(SIG_BLOCK, &mask, NULL) == 0);
-- 
2.26.2

