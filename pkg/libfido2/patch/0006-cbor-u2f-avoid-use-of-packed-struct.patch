From d95bfdbcaadd92fbe04df8b3134be1886377e7a2 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Tue, 26 Nov 2019 19:30:10 -0800
Subject: [PATCH] cbor, u2f: avoid use of packed struct

This also fixes a bug on big-endian systems where the credential
ID length is placed in the wrong byte.
---
 src/cbor.c  | 14 +++++++++--
 src/types.h | 14 ++---------
 src/u2f.c   | 70 ++++++++++++++++++++++++++++++++++++-----------------
 3 files changed, 62 insertions(+), 36 deletions(-)

diff --git a/src/cbor.c b/src/cbor.c
index 3e03592..e60e5e3 100644
--- a/src/cbor.c
+++ b/src/cbor.c
@@ -1228,7 +1228,12 @@ cbor_decode_cred_authdata(const cbor_item_t *item, int cose_alg,
 
 	fido_log_debug("%s: buf=%p, len=%zu", __func__, (const void *)buf, len);
 
-	if (fido_buf_read(&buf, &len, authdata, sizeof(*authdata)) < 0) {
+	if (fido_buf_read(&buf, &len, authdata->rp_id_hash,
+	    sizeof(authdata->rp_id_hash)) < 0 ||
+	    fido_buf_read(&buf, &len, &authdata->flags,
+	    sizeof(authdata->flags)) < 0 ||
+	    fido_buf_read(&buf, &len, &authdata->sigcount,
+	    sizeof(authdata->sigcount)) < 0) {
 		fido_log_debug("%s: fido_buf_read", __func__);
 		return (-1);
 	}
@@ -1278,7 +1283,12 @@ cbor_decode_assert_authdata(const cbor_item_t *item, fido_blob_t *authdata_cbor,
 
 	fido_log_debug("%s: buf=%p, len=%zu", __func__, (const void *)buf, len);
 
-	if (fido_buf_read(&buf, &len, authdata, sizeof(*authdata)) < 0) {
+	if (fido_buf_read(&buf, &len, authdata->rp_id_hash,
+	    sizeof(authdata->rp_id_hash)) < 0 ||
+	    fido_buf_read(&buf, &len, &authdata->flags,
+	    sizeof(authdata->flags)) < 0 ||
+	    fido_buf_read(&buf, &len, &authdata->sigcount,
+	    sizeof(authdata->sigcount)) < 0) {
 		fido_log_debug("%s: fido_buf_read", __func__);
 		return (-1);
 	}
diff --git a/src/types.h b/src/types.h
index af72710..af1874a 100644
--- a/src/types.h
+++ b/src/types.h
@@ -7,8 +7,6 @@
 #ifndef _TYPES_H
 #define _TYPES_H
 
-#include "packed.h"
-
 /* COSE ES256 (ECDSA over P-256 with SHA-256) public key */
 typedef struct es256_pk {
 	unsigned char	x[32];
@@ -31,20 +29,12 @@ typedef struct eddsa_pk {
 	unsigned char x[32];
 } eddsa_pk_t;
 
-PACKED_TYPE(fido_authdata_t,
-struct fido_authdata {
+typedef struct fido_authdata {
 	unsigned char rp_id_hash[32]; /* sha256 of fido_rp.id */
 	uint8_t       flags;          /* user present/verified */
 	uint32_t      sigcount;       /* signature counter */
 	/* actually longer */
-})
-
-PACKED_TYPE(fido_attcred_raw_t,
-struct fido_attcred_raw {
-	unsigned char aaguid[16]; /* credential's aaguid */
-	uint16_t      id_len;     /* credential id length */
-	uint8_t       body[];     /* credential id + pubkey */
-})
+} fido_authdata_t;
 
 typedef struct fido_attcred {
 	unsigned char aaguid[16]; /* credential's aaguid */
diff --git a/src/u2f.c b/src/u2f.c
index 22c6ac9..6db32c5 100644
--- a/src/u2f.c
+++ b/src/u2f.c
@@ -15,6 +15,29 @@
 #include "fido.h"
 #include "fido/es256.h"
 
+/*
+ * Web Authentication section 6.1
+ * https://www.w3.org/TR/webauthn/#authenticator-data
+ */
+enum {
+	AUTHDATA_RP_ID_HASH = 0,
+	AUTHDATA_FLAGS = 32,
+	AUTHDATA_SIGN_COUNT = 33,
+
+	AUTHDATA_BASE_SIZE = 37
+};
+
+/*
+ * Web Authentication section 6.4.1
+ * https://www.w3.org/TR/webauthn/#sec-attested-credential-data
+ */
+enum {
+	ATTCRED_AAGUID = 0,
+	ATTCRED_CREDENTIAL_ID_LENGTH = 16,
+
+	ATTCRED_BASE_SIZE = 18
+};
+
 static int
 sleep_msec(unsigned int msec)
 {
@@ -95,23 +118,24 @@ static int
 authdata_fake(const char *rp_id, uint8_t flags, uint32_t sigcount,
     fido_blob_t *fake_cbor_ad)
 {
-	fido_authdata_t	 ad;
+	uint8_t		 authdata[AUTHDATA_BASE_SIZE] = {0};
+	unsigned char	*rp_id_hash;
 	cbor_item_t	*item = NULL;
 	size_t		 alloc_len;
 
-	memset(&ad, 0, sizeof(ad));
+	rp_id_hash = (unsigned char *)&authdata[AUTHDATA_RP_ID_HASH];
 
 	if (SHA256((const void *)rp_id, strlen(rp_id),
-	    ad.rp_id_hash) != ad.rp_id_hash) {
+	    rp_id_hash) != rp_id_hash) {
 		fido_log_debug("%s: sha256", __func__);
 		return (-1);
 	}
 
-	ad.flags = flags; /* XXX translate? */
-	ad.sigcount = sigcount;
+	authdata[AUTHDATA_FLAGS] = flags; /* XXX translate? */
+	memcpy(&authdata[AUTHDATA_SIGN_COUNT], &sigcount, 4);
 
-	if ((item = cbor_build_bytestring((const unsigned char *)&ad,
-	    sizeof(ad))) == NULL) {
+	if ((item = cbor_build_bytestring((cbor_data)authdata,
+	    sizeof(authdata))) == NULL) {
 		fido_log_debug("%s: cbor_build_bytestring", __func__);
 		return (-1);
 	}
@@ -411,18 +435,18 @@ static int
 encode_cred_authdata(const char *rp_id, const uint8_t *kh, uint8_t kh_len,
     const uint8_t *pubkey, size_t pubkey_len, fido_blob_t *out)
 {
-	fido_authdata_t	 	 authdata;
-	fido_attcred_raw_t	 attcred_raw;
-	fido_blob_t		 pk_blob;
-	fido_blob_t		 authdata_blob;
-	cbor_item_t		*authdata_cbor = NULL;
-	unsigned char		*ptr;
-	size_t			 len;
-	size_t			 alloc_len;
-	int			 ok = -1;
+	uint8_t		 authdata[AUTHDATA_BASE_SIZE] = {0};
+	unsigned char	*rp_id_hash;
+	uint8_t		 attcred_raw[ATTCRED_BASE_SIZE] = {0};
+	fido_blob_t	 pk_blob;
+	fido_blob_t	 authdata_blob;
+	cbor_item_t	*authdata_cbor = NULL;
+	unsigned char	*ptr;
+	size_t		 len;
+	size_t		 alloc_len;
+	int		 ok = -1;
 
 	memset(&pk_blob, 0, sizeof(pk_blob));
-	memset(&authdata, 0, sizeof(authdata));
 	memset(&authdata_blob, 0, sizeof(authdata_blob));
 	memset(out, 0, sizeof(*out));
 
@@ -436,17 +460,19 @@ encode_cred_authdata(const char *rp_id, const uint8_t *kh, uint8_t kh_len,
 		goto fail;
 	}
 
+	rp_id_hash = (unsigned char *)&authdata[AUTHDATA_RP_ID_HASH];
+
 	if (SHA256((const void *)rp_id, strlen(rp_id),
-	    authdata.rp_id_hash) != authdata.rp_id_hash) {
+	    rp_id_hash) != rp_id_hash) {
 		fido_log_debug("%s: sha256", __func__);
 		goto fail;
 	}
 
-	authdata.flags = (CTAP_AUTHDATA_ATT_CRED | CTAP_AUTHDATA_USER_PRESENT);
-	authdata.sigcount = 0;
+	authdata[AUTHDATA_FLAGS] = (CTAP_AUTHDATA_ATT_CRED |
+	    CTAP_AUTHDATA_USER_PRESENT);
 
-	memset(&attcred_raw.aaguid, 0, sizeof(attcred_raw.aaguid));
-	attcred_raw.id_len = (uint16_t)(kh_len << 8); /* XXX */
+	/* big-endian, so second byte is LSB */
+	attcred_raw[ATTCRED_CREDENTIAL_ID_LENGTH + 1] = kh_len;
 
 	len = authdata_blob.len = sizeof(authdata) + sizeof(attcred_raw) +
 	    kh_len + pk_blob.len;
-- 
2.24.0

