From d72b3ec7c3a4afbc72c50379a65d5c4f2f7c5684 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Tue, 26 Nov 2019 18:52:13 -0800
Subject: [PATCH] io: avoid use of packed struct

---
 src/io.c | 128 +++++++++++++++++++++++++++----------------------------
 1 file changed, 62 insertions(+), 66 deletions(-)

diff --git a/src/io.c b/src/io.c
index aa88720..caff99d 100644
--- a/src/io.c
+++ b/src/io.c
@@ -9,25 +9,19 @@
 #include <string.h>
 
 #include "fido.h"
-#include "packed.h"
-
-PACKED_TYPE(frame_t,
-struct frame {
-	uint32_t cid; /* channel id */
-	union {
-		uint8_t type;
-		struct {
-			uint8_t cmd;
-			uint8_t bcnth;
-			uint8_t bcntl;
-			uint8_t data[CTAP_RPT_SIZE - 7];
-		} init;
-		struct {
-			uint8_t seq;
-			uint8_t data[CTAP_RPT_SIZE - 5];
-		} cont;
-	} body;
-})
+
+/* CTAP section 8.1.4 */
+enum {
+	CID,
+
+	INIT_CMD = 4,
+	INIT_BCNTH,
+	INIT_BCNTL,
+	INIT_DATA,
+
+	CONT_SEQ = 4,
+	CONT_DATA,
+};
 
 #ifndef MIN
 #define MIN(x, y) ((x) > (y) ? (y) : (x))
@@ -36,22 +30,19 @@ struct frame {
 static size_t
 tx_preamble(fido_dev_t *d,  uint8_t cmd, const void *buf, size_t count)
 {
-	struct frame	*fp;
-	unsigned char	pkt[sizeof(*fp) + 1];
-	int		n;
+	uint8_t	pkt[1 + CTAP_RPT_SIZE] = {0};
+	int	n;
 
 	if (d->io.write == NULL || (cmd & 0x80) == 0)
 		return (0);
 
-	memset(&pkt, 0, sizeof(pkt));
-	fp = (struct frame *)(pkt + 1);
-	fp->cid = d->cid;
-	fp->body.init.cmd = 0x80 | cmd;
-	fp->body.init.bcnth = (count >> 8) & 0xff;
-	fp->body.init.bcntl = count & 0xff;
-	count = MIN(count, sizeof(fp->body.init.data));
+	memcpy(&pkt[1], &d->cid, 4);
+	pkt[1 + INIT_CMD] = 0x80 | cmd;
+	pkt[1 + INIT_BCNTH] = (count >> 8) & 0xff;
+	pkt[1 + INIT_BCNTL] = count & 0xff;
+	count = MIN(count, CTAP_RPT_SIZE - INIT_DATA);
 	if (count)
-		memcpy(&fp->body.init.data, buf, count);
+		memcpy(&pkt[1 + INIT_DATA], buf, count);
 
 	n = d->io.write(d->io_handle, pkt, sizeof(pkt));
 	if (n < 0 || (size_t)n != sizeof(pkt))
@@ -63,19 +54,16 @@ tx_preamble(fido_dev_t *d,  uint8_t cmd, const void *buf, size_t count)
 static size_t
 tx_frame(fido_dev_t *d, int seq, const void *buf, size_t count)
 {
-	struct frame	*fp;
-	unsigned char	 pkt[sizeof(*fp) + 1];
-	int		 n;
+	uint8_t	pkt[1 + CTAP_RPT_SIZE] = {0};
+	int	n;
 
 	if (d->io.write == NULL || seq < 0 || seq > UINT8_MAX)
 		return (0);
 
-	memset(&pkt, 0, sizeof(pkt));
-	fp = (struct frame *)(pkt + 1);
-	fp->cid = d->cid;
-	fp->body.cont.seq = (uint8_t)seq;
-	count = MIN(count, sizeof(fp->body.cont.data));
-	memcpy(&fp->body.cont.data, buf, count);
+	memcpy(&pkt[1], &d->cid, 4);
+	pkt[1 + CONT_SEQ] = seq;
+	count = MIN(count, CTAP_RPT_SIZE - CONT_DATA);
+	memcpy(&pkt[1 + CONT_DATA], buf, count);
 
 	n = d->io.write(d->io_handle, pkt, sizeof(pkt));
 	if (n < 0 || (size_t)n != sizeof(pkt))
@@ -123,31 +111,34 @@ fido_tx(fido_dev_t *d, uint8_t cmd, const void *buf, size_t count)
 }
 
 static int
-rx_frame(fido_dev_t *d, struct frame *fp, int ms)
+rx_frame(fido_dev_t *d, uint8_t *fp, int ms)
 {
 	int n;
 
 	if (d->io.read == NULL)
 		return (-1);
 
-	n = d->io.read(d->io_handle, (unsigned char *)fp, sizeof(*fp), ms);
-	if (n < 0 || (size_t)n != sizeof(*fp))
+	n = d->io.read(d->io_handle, (unsigned char *)fp, CTAP_RPT_SIZE, ms);
+	if (n < 0 || (size_t)n != CTAP_RPT_SIZE)
 		return (-1);
 
 	return (0);
 }
 
 static int
-rx_preamble(fido_dev_t *d, struct frame *fp, int ms)
+rx_preamble(fido_dev_t *d, uint8_t *fp, int ms)
 {
+	uint32_t cid;
+
 	do {
 		if (rx_frame(d, fp, ms) < 0)
 			return (-1);
+		memcpy(&cid, &fp[CID], 4);
 #ifdef FIDO_FUZZ
-		fp->cid = d->cid;
+		cid = d->cid;
 #endif
-	} while (fp->cid == d->cid &&
-	    fp->body.init.cmd == (CTAP_FRAME_INIT | CTAP_KEEPALIVE));
+	} while (cid == d->cid &&
+	    fp[INIT_CMD] == (CTAP_FRAME_INIT | CTAP_KEEPALIVE));
 
 	return (0);
 }
@@ -155,7 +146,8 @@ rx_preamble(fido_dev_t *d, struct frame *fp, int ms)
 int
 fido_rx(fido_dev_t *d, uint8_t cmd, void *buf, size_t count, int ms)
 {
-	struct frame	f;
+	uint8_t		f[CTAP_RPT_SIZE];
+	uint32_t	cid;
 	uint16_t	r;
 	uint16_t	flen;
 	int		seq;
@@ -166,7 +158,7 @@ fido_rx(fido_dev_t *d, uint8_t cmd, void *buf, size_t count, int ms)
 		return (-1);
 	}
 
-	if (rx_preamble(d, &f, ms) < 0) {
+	if (rx_preamble(d, f, ms) < 0) {
 		fido_log_debug("%s: rx_preamble", __func__);
 		return (-1);
 	}
@@ -175,34 +167,36 @@ fido_rx(fido_dev_t *d, uint8_t cmd, void *buf, size_t count, int ms)
 	    (void *)&f, sizeof(f));
 	fido_log_xxd(&f, sizeof(f));
 
+	memcpy(&cid, &f[CID], 4);
+
 #ifdef FIDO_FUZZ
-	f.cid = d->cid;
-	f.body.init.cmd = cmd;
+	cid = d->cid;
+	f[INIT_CMD] = cmd;
 #endif
 
-	if (f.cid != d->cid || f.body.init.cmd != cmd) {
+	if (cid != d->cid || f[INIT_CMD] != cmd) {
 		fido_log_debug("%s: cid (0x%x, 0x%x), cmd (0x%02x, 0x%02x)",
-		    __func__, f.cid, d->cid, f.body.init.cmd, cmd);
+		    __func__, cid, d->cid, f[INIT_CMD], cmd);
 		return (-1);
 	}
 
-	flen = (f.body.init.bcnth << 8) | f.body.init.bcntl;
+	flen = (f[INIT_BCNTH] << 8) | f[INIT_BCNTL];
 	if (count < (size_t)flen) {
 		fido_log_debug("%s: count < flen (%zu, %zu)", __func__, count,
 		    (size_t)flen);
 		return (-1);
 	}
-	if (flen < sizeof(f.body.init.data)) {
-		memcpy(buf, f.body.init.data, flen);
+	if (flen < CTAP_RPT_SIZE - INIT_DATA) {
+		memcpy(buf, &f[INIT_DATA], flen);
 		return (flen);
 	}
 
-	memcpy(buf, f.body.init.data, sizeof(f.body.init.data));
-	r = sizeof(f.body.init.data);
+	memcpy(buf, &f[INIT_DATA], CTAP_RPT_SIZE - INIT_DATA);
+	r = CTAP_RPT_SIZE - INIT_DATA;
 	seq = 0;
 
 	while ((size_t)r < flen) {
-		if (rx_frame(d, &f, ms) < 0) {
+		if (rx_frame(d, f, ms) < 0) {
 			fido_log_debug("%s: rx_frame", __func__);
 			return (-1);
 		}
@@ -211,24 +205,26 @@ fido_rx(fido_dev_t *d, uint8_t cmd, void *buf, size_t count, int ms)
 		    __func__, (void *)&f, sizeof(f));
 		fido_log_xxd(&f, sizeof(f));
 
+		memcpy(&cid, &f[CID], 4);
+
 #ifdef FIDO_FUZZ
-		f.cid = d->cid;
-		f.body.cont.seq = seq;
+		cid = d->cid;
+		f[CONT_SEQ] = seq;
 #endif
 
-		if (f.cid != d->cid || f.body.cont.seq != seq++) {
+		if (cid != d->cid || f[CONT_SEQ] != seq++) {
 			fido_log_debug("%s: cid (0x%x, 0x%x), seq (%d, %d)",
-			    __func__, f.cid, d->cid, f.body.cont.seq, seq);
+			    __func__, cid, d->cid, f[CONT_SEQ], seq);
 			return (-1);
 		}
 
 		uint8_t *p = (uint8_t *)buf + r;
 
-		if ((size_t)(flen - r) > sizeof(f.body.cont.data)) {
-			memcpy(p, f.body.cont.data, sizeof(f.body.cont.data));
-			r += sizeof(f.body.cont.data);
+		if ((size_t)(flen - r) > CTAP_RPT_SIZE - CONT_DATA) {
+			memcpy(p, &f[CONT_DATA], CTAP_RPT_SIZE - CONT_DATA);
+			r += CTAP_RPT_SIZE - CONT_DATA;
 		} else {
-			memcpy(p, f.body.cont.data, flen - r);
+			memcpy(p, &f[CONT_DATA], flen - r);
 			r += (flen - r); /* break */
 		}
 	}
-- 
2.24.0

